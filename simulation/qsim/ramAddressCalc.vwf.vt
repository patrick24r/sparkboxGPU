// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/12/2020 16:02:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ramAddressCalc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ramAddressCalc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] frameNumber;
reg [15:0] height;
reg isSprite;
reg [15:0] layerX;
reg [15:0] layerY;
reg rst;
reg [15:0] width;
// wires                                               
wire [26:0] addressOffsetBytes;
wire rdy;

// assign statements (if any)                          
ramAddressCalc i1 (
// port map - connection between master ports and signals/registers   
	.addressOffsetBytes(addressOffsetBytes),
	.clk(clk),
	.frameNumber(frameNumber),
	.height(height),
	.isSprite(isSprite),
	.layerX(layerX),
	.layerY(layerY),
	.rdy(rdy),
	.rst(rst),
	.width(width)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	clk = 1'b1;
	# 10000;
	repeat(49)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #80000 1'b0;
	rst = #10000 1'b1;
	rst = #70000 1'b0;
	rst = #10000 1'b1;
	rst = #70000 1'b0;
	rst = #10000 1'b1;
	rst = #70000 1'b0;
	rst = #10000 1'b1;
	rst = #70000 1'b0;
	rst = #10000 1'b1;
	rst = #70000 1'b0;
	rst = #10000 1'b1;
	rst = #70000 1'b0;
	rst = #10000 1'b1;
	rst = #70000 1'b0;
	rst = #10000 1'b1;
	rst = #70000 1'b0;
	rst = #10000 1'b1;
	rst = #150000 1'b0;
	rst = #10000 1'b1;
end 

// isSprite
initial
begin
	isSprite = 1'b0;
	isSprite = #80000 1'b1;
	isSprite = #80000 1'b0;
	isSprite = #80000 1'b1;
	isSprite = #80000 1'b0;
	isSprite = #80000 1'b1;
	isSprite = #80000 1'b0;
	isSprite = #80000 1'b1;
	# 80000;
	repeat(2)
	begin
		isSprite = 1'b0;
		isSprite = #80000 1'b1;
		# 80000;
	end
	isSprite = 1'b0;
end 
// frameNumber[ 7 ]
initial
begin
	frameNumber[7] = 1'b0;
end 
// frameNumber[ 6 ]
initial
begin
	frameNumber[6] = 1'b0;
end 
// frameNumber[ 5 ]
initial
begin
	frameNumber[5] = 1'b0;
end 
// frameNumber[ 4 ]
initial
begin
	frameNumber[4] = 1'b0;
end 
// frameNumber[ 3 ]
initial
begin
	frameNumber[3] = 1'b0;
end 
// frameNumber[ 2 ]
initial
begin
	frameNumber[2] = 1'b1;
	frameNumber[2] = #320000 1'b0;
	frameNumber[2] = #320000 1'b1;
	frameNumber[2] = #320000 1'b0;
end 
// frameNumber[ 1 ]
initial
begin
	frameNumber[1] = 1'b1;
	frameNumber[1] = #320000 1'b0;
	frameNumber[1] = #160000 1'b1;
	frameNumber[1] = #480000 1'b0;
end 
// frameNumber[ 0 ]
initial
begin
	frameNumber[0] = 1'b1;
	frameNumber[0] = #160000 1'b0;
	frameNumber[0] = #480000 1'b1;
end 
// height[ 15 ]
initial
begin
	height[15] = 1'b0;
end 
// height[ 14 ]
initial
begin
	height[14] = 1'b0;
end 
// height[ 13 ]
initial
begin
	height[13] = 1'b0;
end 
// height[ 12 ]
initial
begin
	height[12] = 1'b0;
end 
// height[ 11 ]
initial
begin
	height[11] = 1'b0;
end 
// height[ 10 ]
initial
begin
	height[10] = 1'b0;
end 
// height[ 9 ]
initial
begin
	height[9] = 1'b0;
end 
// height[ 8 ]
initial
begin
	height[8] = 1'b0;
end 
// height[ 7 ]
initial
begin
	height[7] = 1'b0;
	height[7] = #160000 1'b1;
	height[7] = #320000 1'b0;
	height[7] = #480000 1'b1;
end 
// height[ 6 ]
initial
begin
	height[6] = 1'b1;
	height[6] = #320000 1'b0;
	height[6] = #320000 1'b1;
	height[6] = #160000 1'b0;
end 
// height[ 5 ]
initial
begin
	height[5] = 1'b1;
	height[5] = #320000 1'b0;
end 
// height[ 4 ]
initial
begin
	height[4] = 1'b0;
	height[4] = #640000 1'b1;
	height[4] = #320000 1'b0;
end 
// height[ 3 ]
initial
begin
	height[3] = 1'b0;
	height[3] = #160000 1'b1;
	height[3] = #160000 1'b0;
	height[3] = #160000 1'b1;
	height[3] = #320000 1'b0;
end 
// height[ 2 ]
initial
begin
	height[2] = 1'b0;
	height[2] = #160000 1'b1;
	height[2] = #160000 1'b0;
	height[2] = #160000 1'b1;
	height[2] = #160000 1'b0;
	height[2] = #160000 1'b1;
	height[2] = #160000 1'b0;
end 
// height[ 1 ]
initial
begin
	height[1] = 1'b1;
	height[1] = #480000 1'b0;
	height[1] = #160000 1'b1;
end 
// height[ 0 ]
initial
begin
	height[0] = 1'b0;
	height[0] = #480000 1'b1;
	height[0] = #160000 1'b0;
	height[0] = #160000 1'b1;
	height[0] = #160000 1'b0;
end 
// width[ 15 ]
initial
begin
	width[15] = 1'b0;
end 
// width[ 14 ]
initial
begin
	width[14] = 1'b0;
end 
// width[ 13 ]
initial
begin
	width[13] = 1'b0;
end 
// width[ 12 ]
initial
begin
	width[12] = 1'b0;
end 
// width[ 11 ]
initial
begin
	width[11] = 1'b0;
end 
// width[ 10 ]
initial
begin
	width[10] = 1'b0;
end 
// width[ 9 ]
initial
begin
	width[9] = 1'b0;
end 
// width[ 8 ]
initial
begin
	width[8] = 1'b0;
end 
// width[ 7 ]
initial
begin
	width[7] = 1'b1;
	width[7] = #160000 1'b0;
	width[7] = #320000 1'b1;
	width[7] = #320000 1'b0;
end 
// width[ 6 ]
initial
begin
	width[6] = 1'b0;
	width[6] = #320000 1'b1;
end 
// width[ 5 ]
initial
begin
	width[5] = 1'b1;
	width[5] = #160000 1'b0;
	width[5] = #480000 1'b1;
end 
// width[ 4 ]
initial
begin
	width[4] = 1'b1;
	width[4] = #160000 1'b0;
	width[4] = #320000 1'b1;
	width[4] = #480000 1'b0;
end 
// width[ 3 ]
initial
begin
	width[3] = 1'b1;
	width[3] = #480000 1'b0;
	width[3] = #320000 1'b1;
	width[3] = #160000 1'b0;
end 
// width[ 2 ]
initial
begin
	width[2] = 1'b0;
	width[2] = #320000 1'b1;
	width[2] = #480000 1'b0;
end 
// width[ 1 ]
initial
begin
	width[1] = 1'b0;
	width[1] = #320000 1'b1;
	width[1] = #480000 1'b0;
	width[1] = #160000 1'b1;
end 
// width[ 0 ]
initial
begin
	width[0] = 1'b1;
	width[0] = #480000 1'b0;
	width[0] = #480000 1'b1;
end 
// layerX[ 15 ]
initial
begin
	layerX[15] = 1'b0;
	layerX[15] = #640000 1'b1;
	layerX[15] = #80000 1'b0;
end 
// layerX[ 14 ]
initial
begin
	layerX[14] = 1'b0;
	layerX[14] = #640000 1'b1;
	layerX[14] = #80000 1'b0;
end 
// layerX[ 13 ]
initial
begin
	layerX[13] = 1'b0;
	layerX[13] = #640000 1'b1;
	layerX[13] = #80000 1'b0;
end 
// layerX[ 12 ]
initial
begin
	layerX[12] = 1'b0;
	layerX[12] = #640000 1'b1;
	layerX[12] = #80000 1'b0;
end 
// layerX[ 11 ]
initial
begin
	layerX[11] = 1'b0;
	layerX[11] = #640000 1'b1;
	layerX[11] = #80000 1'b0;
end 
// layerX[ 10 ]
initial
begin
	layerX[10] = 1'b0;
	layerX[10] = #640000 1'b1;
	layerX[10] = #80000 1'b0;
end 
// layerX[ 9 ]
initial
begin
	layerX[9] = 1'b0;
	layerX[9] = #480000 1'b1;
	layerX[9] = #80000 1'b0;
	layerX[9] = #80000 1'b1;
	layerX[9] = #80000 1'b0;
end 
// layerX[ 8 ]
initial
begin
	layerX[8] = 1'b0;
	layerX[8] = #480000 1'b1;
	layerX[8] = #80000 1'b0;
	layerX[8] = #80000 1'b1;
	layerX[8] = #80000 1'b0;
end 
// layerX[ 7 ]
initial
begin
	layerX[7] = 1'b0;
	layerX[7] = #320000 1'b1;
	layerX[7] = #80000 1'b0;
	layerX[7] = #80000 1'b1;
	layerX[7] = #80000 1'b0;
	layerX[7] = #80000 1'b1;
	layerX[7] = #80000 1'b0;
end 
// layerX[ 6 ]
initial
begin
	layerX[6] = 1'b0;
	layerX[6] = #480000 1'b1;
	layerX[6] = #80000 1'b0;
	layerX[6] = #80000 1'b1;
	layerX[6] = #80000 1'b0;
end 
// layerX[ 5 ]
initial
begin
	layerX[5] = 1'b1;
	layerX[5] = #160000 1'b0;
	layerX[5] = #160000 1'b1;
	layerX[5] = #240000 1'b0;
	layerX[5] = #80000 1'b1;
	layerX[5] = #160000 1'b0;
end 
// layerX[ 4 ]
initial
begin
	layerX[4] = 1'b1;
	layerX[4] = #240000 1'b0;
	layerX[4] = #160000 1'b1;
	layerX[4] = #80000 1'b0;
	layerX[4] = #160000 1'b1;
	layerX[4] = #80000 1'b0;
	layerX[4] = #240000 1'b1;
end 
// layerX[ 3 ]
initial
begin
	layerX[3] = 1'b1;
	layerX[3] = #240000 1'b0;
	layerX[3] = #160000 1'b1;
	layerX[3] = #400000 1'b0;
end 
// layerX[ 2 ]
initial
begin
	layerX[2] = 1'b0;
	layerX[2] = #400000 1'b1;
	layerX[2] = #80000 1'b0;
	layerX[2] = #160000 1'b1;
	layerX[2] = #160000 1'b0;
	layerX[2] = #160000 1'b1;
end 
// layerX[ 1 ]
initial
begin
	layerX[1] = 1'b0;
	layerX[1] = #240000 1'b1;
	layerX[1] = #80000 1'b0;
	layerX[1] = #240000 1'b1;
	layerX[1] = #400000 1'b0;
end 
// layerX[ 0 ]
initial
begin
	layerX[0] = 1'b0;
	layerX[0] = #160000 1'b1;
	layerX[0] = #80000 1'b0;
	layerX[0] = #80000 1'b1;
	layerX[0] = #160000 1'b0;
	layerX[0] = #160000 1'b1;
	layerX[0] = #160000 1'b0;
	layerX[0] = #160000 1'b1;
end 
// layerY[ 15 ]
initial
begin
	layerY[15] = 1'b0;
end 
// layerY[ 14 ]
initial
begin
	layerY[14] = 1'b0;
end 
// layerY[ 13 ]
initial
begin
	layerY[13] = 1'b0;
end 
// layerY[ 12 ]
initial
begin
	layerY[12] = 1'b0;
end 
// layerY[ 11 ]
initial
begin
	layerY[11] = 1'b0;
end 
// layerY[ 10 ]
initial
begin
	layerY[10] = 1'b0;
end 
// layerY[ 9 ]
initial
begin
	layerY[9] = 1'b0;
end 
// layerY[ 8 ]
initial
begin
	layerY[8] = 1'b0;
end 
// layerY[ 7 ]
initial
begin
	layerY[7] = 1'b0;
end 
// layerY[ 6 ]
initial
begin
	layerY[6] = 1'b0;
end 
// layerY[ 5 ]
initial
begin
	layerY[5] = 1'b1;
	layerY[5] = #320000 1'b0;
	layerY[5] = #160000 1'b1;
	layerY[5] = #320000 1'b0;
	layerY[5] = #160000 1'b1;
end 
// layerY[ 4 ]
initial
begin
	layerY[4] = 1'b0;
	layerY[4] = #320000 1'b1;
	layerY[4] = #160000 1'b0;
	layerY[4] = #160000 1'b1;
	layerY[4] = #160000 1'b0;
end 
// layerY[ 3 ]
initial
begin
	layerY[3] = 1'b1;
	layerY[3] = #320000 1'b0;
	layerY[3] = #160000 1'b1;
	layerY[3] = #160000 1'b0;
	layerY[3] = #320000 1'b1;
end 
// layerY[ 2 ]
initial
begin
	layerY[2] = 1'b0;
	layerY[2] = #480000 1'b1;
	layerY[2] = #160000 1'b0;
	layerY[2] = #320000 1'b1;
end 
// layerY[ 1 ]
initial
begin
	layerY[1] = 1'b1;
	layerY[1] = #160000 1'b0;
	layerY[1] = #160000 1'b1;
	layerY[1] = #160000 1'b0;
	layerY[1] = #480000 1'b1;
end 
// layerY[ 0 ]
initial
begin
	layerY[0] = 1'b0;
	layerY[0] = #320000 1'b1;
	layerY[0] = #320000 1'b0;
	layerY[0] = #320000 1'b1;
end 
endmodule

