// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/02/2020 17:19:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          layerRamTop
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module layerRamTop_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_n;
reg [7:0] ctrl_layerId;
reg ctrl_read_en;
reg [15:0] ctrl_write_data;
reg ctrl_write_en;
reg [24:0] pipe_addr_bytes;
reg [5:0] pipe_layer;
reg [7:0] pipe_layerId;
reg pipe_read_en;
reg pipeline_clk;
reg rst;
reg [15:0] treg_sdram_dq;
// wires                                               
wire rdy;
wire [15:0] read_data;
wire [12:0] sdram_addr;
wire [1:0] sdram_ba;
wire sdram_cas_n;
wire sdram_cke;
wire sdram_clk;
wire sdram_cs_n;
wire [15:0] sdram_dq;
wire [1:0] sdram_dqm;
wire sdram_ras_n;
wire sdram_we_n;

// assign statements (if any)                          
assign sdram_dq = treg_sdram_dq;
layerRamTop i1 (
// port map - connection between master ports and signals/registers   
	.clk_n(clk_n),
	.ctrl_layerId(ctrl_layerId),
	.ctrl_read_en(ctrl_read_en),
	.ctrl_write_data(ctrl_write_data),
	.ctrl_write_en(ctrl_write_en),
	.pipe_addr_bytes(pipe_addr_bytes),
	.pipe_layer(pipe_layer),
	.pipe_layerId(pipe_layerId),
	.pipe_read_en(pipe_read_en),
	.pipeline_clk(pipeline_clk),
	.rdy(rdy),
	.read_data(read_data),
	.rst(rst),
	.sdram_addr(sdram_addr),
	.sdram_ba(sdram_ba),
	.sdram_cas_n(sdram_cas_n),
	.sdram_cke(sdram_cke),
	.sdram_clk(sdram_clk),
	.sdram_cs_n(sdram_cs_n),
	.sdram_dq(sdram_dq),
	.sdram_dqm(sdram_dqm),
	.sdram_ras_n(sdram_ras_n),
	.sdram_we_n(sdram_we_n)
);
initial 
begin 
#2000000 $finish;
end 

// rst
initial
begin
	rst = 1'b1;
end 

// clk_n
always
begin
	clk_n = 1'b0;
	clk_n = #10000 1'b1;
	#10000;
end 

// pipeline_clk
initial
begin
	pipeline_clk = 1'b0;
	pipeline_clk = #1160000 1'b1;
	pipeline_clk = #10000 1'b0;
	pipeline_clk = #130000 1'b1;
	pipeline_clk = #10000 1'b0;
end 
// pipe_layer[ 5 ]
initial
begin
	pipe_layer[5] = 1'b0;
end 
// pipe_layer[ 4 ]
initial
begin
	pipe_layer[4] = 1'b0;
end 
// pipe_layer[ 3 ]
initial
begin
	pipe_layer[3] = 1'b0;
end 
// pipe_layer[ 2 ]
initial
begin
	pipe_layer[2] = 1'b0;
end 
// pipe_layer[ 1 ]
initial
begin
	pipe_layer[1] = 1'b0;
end 
// pipe_layer[ 0 ]
initial
begin
	pipe_layer[0] = 1'b0;
end 
// pipe_layerId[ 7 ]
initial
begin
	pipe_layerId[7] = 1'b0;
end 
// pipe_layerId[ 6 ]
initial
begin
	pipe_layerId[6] = 1'b0;
end 
// pipe_layerId[ 5 ]
initial
begin
	pipe_layerId[5] = 1'b0;
end 
// pipe_layerId[ 4 ]
initial
begin
	pipe_layerId[4] = 1'b0;
end 
// pipe_layerId[ 3 ]
initial
begin
	pipe_layerId[3] = 1'b0;
end 
// pipe_layerId[ 2 ]
initial
begin
	pipe_layerId[2] = 1'b0;
end 
// pipe_layerId[ 1 ]
initial
begin
	pipe_layerId[1] = 1'b0;
end 
// pipe_layerId[ 0 ]
initial
begin
	pipe_layerId[0] = 1'b0;
end 
// pipe_addr_bytes[ 24 ]
initial
begin
	pipe_addr_bytes[24] = 1'b0;
end 
// pipe_addr_bytes[ 23 ]
initial
begin
	pipe_addr_bytes[23] = 1'b0;
end 
// pipe_addr_bytes[ 22 ]
initial
begin
	pipe_addr_bytes[22] = 1'b0;
end 
// pipe_addr_bytes[ 21 ]
initial
begin
	pipe_addr_bytes[21] = 1'b0;
end 
// pipe_addr_bytes[ 20 ]
initial
begin
	pipe_addr_bytes[20] = 1'b0;
end 
// pipe_addr_bytes[ 19 ]
initial
begin
	pipe_addr_bytes[19] = 1'b0;
end 
// pipe_addr_bytes[ 18 ]
initial
begin
	pipe_addr_bytes[18] = 1'b0;
end 
// pipe_addr_bytes[ 17 ]
initial
begin
	pipe_addr_bytes[17] = 1'b0;
end 
// pipe_addr_bytes[ 16 ]
initial
begin
	pipe_addr_bytes[16] = 1'b0;
end 
// pipe_addr_bytes[ 15 ]
initial
begin
	pipe_addr_bytes[15] = 1'b0;
end 
// pipe_addr_bytes[ 14 ]
initial
begin
	pipe_addr_bytes[14] = 1'b0;
end 
// pipe_addr_bytes[ 13 ]
initial
begin
	pipe_addr_bytes[13] = 1'b0;
end 
// pipe_addr_bytes[ 12 ]
initial
begin
	pipe_addr_bytes[12] = 1'b0;
end 
// pipe_addr_bytes[ 11 ]
initial
begin
	pipe_addr_bytes[11] = 1'b0;
end 
// pipe_addr_bytes[ 10 ]
initial
begin
	pipe_addr_bytes[10] = 1'b0;
end 
// pipe_addr_bytes[ 9 ]
initial
begin
	pipe_addr_bytes[9] = 1'b0;
end 
// pipe_addr_bytes[ 8 ]
initial
begin
	pipe_addr_bytes[8] = 1'b0;
end 
// pipe_addr_bytes[ 7 ]
initial
begin
	pipe_addr_bytes[7] = 1'b0;
end 
// pipe_addr_bytes[ 6 ]
initial
begin
	pipe_addr_bytes[6] = 1'b0;
end 
// pipe_addr_bytes[ 5 ]
initial
begin
	pipe_addr_bytes[5] = 1'b0;
end 
// pipe_addr_bytes[ 4 ]
initial
begin
	pipe_addr_bytes[4] = 1'b0;
end 
// pipe_addr_bytes[ 3 ]
initial
begin
	pipe_addr_bytes[3] = 1'b0;
	pipe_addr_bytes[3] = #1300000 1'b1;
end 
// pipe_addr_bytes[ 2 ]
initial
begin
	pipe_addr_bytes[2] = 1'b0;
end 
// pipe_addr_bytes[ 1 ]
initial
begin
	pipe_addr_bytes[1] = 1'b0;
	pipe_addr_bytes[1] = #1300000 1'b1;
end 
// pipe_addr_bytes[ 0 ]
initial
begin
	pipe_addr_bytes[0] = 1'b0;
end 

// pipe_read_en
initial
begin
	pipe_read_en = 1'b0;
	pipe_read_en = #1300000 1'b1;
end 
// ctrl_layerId[ 7 ]
initial
begin
	ctrl_layerId[7] = 1'b0;
end 
// ctrl_layerId[ 6 ]
initial
begin
	ctrl_layerId[6] = 1'b0;
end 
// ctrl_layerId[ 5 ]
initial
begin
	ctrl_layerId[5] = 1'b0;
end 
// ctrl_layerId[ 4 ]
initial
begin
	ctrl_layerId[4] = 1'b0;
end 
// ctrl_layerId[ 3 ]
initial
begin
	ctrl_layerId[3] = 1'b0;
end 
// ctrl_layerId[ 2 ]
initial
begin
	ctrl_layerId[2] = 1'b0;
end 
// ctrl_layerId[ 1 ]
initial
begin
	ctrl_layerId[1] = 1'b0;
	ctrl_layerId[1] = #540000 1'b1;
	ctrl_layerId[1] = #140000 1'b0;
end 
// ctrl_layerId[ 0 ]
initial
begin
	ctrl_layerId[0] = 1'b0;
	ctrl_layerId[0] = #260000 1'b1;
	ctrl_layerId[0] = #280000 1'b0;
end 

// ctrl_read_en
initial
begin
	ctrl_read_en = 1'b0;
	ctrl_read_en = #680000 1'b1;
	ctrl_read_en = #260000 1'b0;
	ctrl_read_en = #20000 1'b1;
	ctrl_read_en = #140000 1'b0;
end 
// ctrl_write_data[ 15 ]
initial
begin
	ctrl_write_data[15] = 1'b0;
end 
// ctrl_write_data[ 14 ]
initial
begin
	ctrl_write_data[14] = 1'b0;
end 
// ctrl_write_data[ 13 ]
initial
begin
	ctrl_write_data[13] = 1'b0;
end 
// ctrl_write_data[ 12 ]
initial
begin
	ctrl_write_data[12] = 1'b0;
end 
// ctrl_write_data[ 11 ]
initial
begin
	ctrl_write_data[11] = 1'b0;
end 
// ctrl_write_data[ 10 ]
initial
begin
	ctrl_write_data[10] = 1'b0;
end 
// ctrl_write_data[ 9 ]
initial
begin
	ctrl_write_data[9] = 1'b0;
end 
// ctrl_write_data[ 8 ]
initial
begin
	ctrl_write_data[8] = 1'b0;
end 
// ctrl_write_data[ 7 ]
initial
begin
	ctrl_write_data[7] = 1'b0;
end 
// ctrl_write_data[ 6 ]
initial
begin
	ctrl_write_data[6] = 1'b0;
end 
// ctrl_write_data[ 5 ]
initial
begin
	ctrl_write_data[5] = 1'b0;
	ctrl_write_data[5] = #260000 1'b1;
	ctrl_write_data[5] = #280000 1'b0;
	ctrl_write_data[5] = #140000 1'b1;
	ctrl_write_data[5] = #120000 1'b0;
end 
// ctrl_write_data[ 4 ]
initial
begin
	ctrl_write_data[4] = 1'b0;
	ctrl_write_data[4] = #260000 1'b1;
	ctrl_write_data[4] = #140000 1'b0;
	ctrl_write_data[4] = #140000 1'b1;
	ctrl_write_data[4] = #260000 1'b0;
end 
// ctrl_write_data[ 3 ]
initial
begin
	ctrl_write_data[3] = 1'b0;
	ctrl_write_data[3] = #260000 1'b1;
	ctrl_write_data[3] = #140000 1'b0;
	ctrl_write_data[3] = #280000 1'b1;
	ctrl_write_data[3] = #120000 1'b0;
end 
// ctrl_write_data[ 2 ]
initial
begin
	ctrl_write_data[2] = 1'b0;
	ctrl_write_data[2] = #140000 1'b1;
	ctrl_write_data[2] = #260000 1'b0;
end 
// ctrl_write_data[ 1 ]
initial
begin
	ctrl_write_data[1] = 1'b0;
	ctrl_write_data[1] = #260000 1'b1;
	ctrl_write_data[1] = #140000 1'b0;
	ctrl_write_data[1] = #280000 1'b1;
	ctrl_write_data[1] = #120000 1'b0;
end 
// ctrl_write_data[ 0 ]
initial
begin
	ctrl_write_data[0] = 1'b0;
	ctrl_write_data[0] = #30000 1'b1;
	ctrl_write_data[0] = #110000 1'b0;
	ctrl_write_data[0] = #540000 1'b1;
	ctrl_write_data[0] = #120000 1'b0;
end 

// ctrl_write_en
initial
begin
	ctrl_write_en = 1'b0;
	ctrl_write_en = #40000 1'b1;
	ctrl_write_en = #40000 1'b0;
	ctrl_write_en = #60000 1'b1;
	ctrl_write_en = #100000 1'b0;
	ctrl_write_en = #20000 1'b1;
	ctrl_write_en = #120000 1'b0;
	ctrl_write_en = #20000 1'b1;
	ctrl_write_en = #120000 1'b0;
	ctrl_write_en = #20000 1'b1;
	ctrl_write_en = #120000 1'b0;
end 
// sdram_dq[ 15 ]
initial
begin
	treg_sdram_dq[15] = 1'bZ;
	treg_sdram_dq[15] = #830000 1'b0;
	treg_sdram_dq[15] = #110000 1'bZ;
	treg_sdram_dq[15] = #40000 1'b0;
	treg_sdram_dq[15] = #120000 1'bZ;
end 
// sdram_dq[ 14 ]
initial
begin
	treg_sdram_dq[14] = 1'bZ;
	treg_sdram_dq[14] = #830000 1'b0;
	treg_sdram_dq[14] = #110000 1'bZ;
	treg_sdram_dq[14] = #40000 1'b0;
	treg_sdram_dq[14] = #120000 1'bZ;
end 
// sdram_dq[ 13 ]
initial
begin
	treg_sdram_dq[13] = 1'bZ;
	treg_sdram_dq[13] = #830000 1'b0;
	treg_sdram_dq[13] = #110000 1'bZ;
	treg_sdram_dq[13] = #40000 1'b0;
	treg_sdram_dq[13] = #120000 1'bZ;
end 
// sdram_dq[ 12 ]
initial
begin
	treg_sdram_dq[12] = 1'bZ;
	treg_sdram_dq[12] = #830000 1'b0;
	treg_sdram_dq[12] = #110000 1'bZ;
	treg_sdram_dq[12] = #40000 1'b0;
	treg_sdram_dq[12] = #120000 1'bZ;
end 
// sdram_dq[ 11 ]
initial
begin
	treg_sdram_dq[11] = 1'bZ;
	treg_sdram_dq[11] = #830000 1'b0;
	treg_sdram_dq[11] = #110000 1'bZ;
	treg_sdram_dq[11] = #40000 1'b0;
	treg_sdram_dq[11] = #120000 1'bZ;
end 
// sdram_dq[ 10 ]
initial
begin
	treg_sdram_dq[10] = 1'bZ;
	treg_sdram_dq[10] = #830000 1'b0;
	treg_sdram_dq[10] = #110000 1'bZ;
	treg_sdram_dq[10] = #40000 1'b0;
	treg_sdram_dq[10] = #120000 1'bZ;
end 
// sdram_dq[ 9 ]
initial
begin
	treg_sdram_dq[9] = 1'bZ;
	treg_sdram_dq[9] = #830000 1'b0;
	treg_sdram_dq[9] = #110000 1'bZ;
	treg_sdram_dq[9] = #40000 1'b0;
	treg_sdram_dq[9] = #120000 1'bZ;
end 
// sdram_dq[ 8 ]
initial
begin
	treg_sdram_dq[8] = 1'bZ;
	treg_sdram_dq[8] = #830000 1'b0;
	treg_sdram_dq[8] = #110000 1'bZ;
	treg_sdram_dq[8] = #40000 1'b0;
	treg_sdram_dq[8] = #120000 1'bZ;
end 
// sdram_dq[ 7 ]
initial
begin
	treg_sdram_dq[7] = 1'bZ;
	treg_sdram_dq[7] = #830000 1'b0;
	treg_sdram_dq[7] = #110000 1'bZ;
	treg_sdram_dq[7] = #40000 1'b0;
	treg_sdram_dq[7] = #120000 1'bZ;
end 
// sdram_dq[ 6 ]
initial
begin
	treg_sdram_dq[6] = 1'bZ;
	treg_sdram_dq[6] = #830000 1'b0;
	treg_sdram_dq[6] = #110000 1'bZ;
	treg_sdram_dq[6] = #40000 1'b0;
	treg_sdram_dq[6] = #120000 1'bZ;
end 
// sdram_dq[ 5 ]
initial
begin
	treg_sdram_dq[5] = 1'bZ;
	treg_sdram_dq[5] = #830000 1'b0;
	treg_sdram_dq[5] = #110000 1'bZ;
	treg_sdram_dq[5] = #40000 1'b0;
	treg_sdram_dq[5] = #120000 1'bZ;
end 
// sdram_dq[ 4 ]
initial
begin
	treg_sdram_dq[4] = 1'bZ;
	treg_sdram_dq[4] = #830000 1'b0;
	treg_sdram_dq[4] = #110000 1'bZ;
	treg_sdram_dq[4] = #40000 1'b0;
	treg_sdram_dq[4] = #120000 1'bZ;
end 
// sdram_dq[ 3 ]
initial
begin
	treg_sdram_dq[3] = 1'bZ;
	treg_sdram_dq[3] = #830000 1'b0;
	treg_sdram_dq[3] = #110000 1'bZ;
	treg_sdram_dq[3] = #40000 1'b0;
	treg_sdram_dq[3] = #120000 1'bZ;
end 
// sdram_dq[ 2 ]
initial
begin
	treg_sdram_dq[2] = 1'bZ;
	treg_sdram_dq[2] = #830000 1'b0;
	treg_sdram_dq[2] = #110000 1'bZ;
	treg_sdram_dq[2] = #40000 1'b0;
	treg_sdram_dq[2] = #120000 1'bZ;
end 
// sdram_dq[ 1 ]
initial
begin
	treg_sdram_dq[1] = 1'bZ;
	treg_sdram_dq[1] = #830000 1'b0;
	treg_sdram_dq[1] = #110000 1'bZ;
	treg_sdram_dq[1] = #40000 1'b1;
	treg_sdram_dq[1] = #120000 1'bZ;
end 
// sdram_dq[ 0 ]
initial
begin
	treg_sdram_dq[0] = 1'bZ;
	treg_sdram_dq[0] = #830000 1'b1;
	treg_sdram_dq[0] = #110000 1'bZ;
	treg_sdram_dq[0] = #40000 1'b0;
	treg_sdram_dq[0] = #120000 1'bZ;
end 
endmodule

