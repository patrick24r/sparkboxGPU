// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/20/2020 05:42:53"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          simLcdTester
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module simLcdTester_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_12mhz;
reg data_valid;
reg [23:0] rgb_in;
reg rst;
// wires                                               
wire d_clk;
wire d_en;
wire data_req;
wire disp_en;
wire hsync;
wire [23:0] rgb_out;
wire vsync;

// assign statements (if any)                          
simLcdTester i1 (
// port map - connection between master ports and signals/registers   
	.clk_12mhz(clk_12mhz),
	.d_clk(d_clk),
	.d_en(d_en),
	.data_req(data_req),
	.data_valid(data_valid),
	.disp_en(disp_en),
	.hsync(hsync),
	.rgb_in(rgb_in),
	.rgb_out(rgb_out),
	.rst(rst),
	.vsync(vsync)
);
initial 
begin 
#2000000 $finish;
end 

// rst
initial
begin
	rst = 1'b1;
end 

// clk_12mhz
always
begin
	clk_12mhz = 1'b0;
	clk_12mhz = #10000 1'b1;
	#10000;
end 
// rgb_in[ 23 ]
initial
begin
	rgb_in[23] = 1'b0;
end 
// rgb_in[ 22 ]
initial
begin
	rgb_in[22] = 1'b0;
end 
// rgb_in[ 21 ]
initial
begin
	rgb_in[21] = 1'b0;
end 
// rgb_in[ 20 ]
initial
begin
	rgb_in[20] = 1'b0;
end 
// rgb_in[ 19 ]
initial
begin
	rgb_in[19] = 1'b0;
end 
// rgb_in[ 18 ]
initial
begin
	rgb_in[18] = 1'b0;
end 
// rgb_in[ 17 ]
initial
begin
	rgb_in[17] = 1'b0;
end 
// rgb_in[ 16 ]
initial
begin
	rgb_in[16] = 1'b0;
end 
// rgb_in[ 15 ]
initial
begin
	rgb_in[15] = 1'b0;
end 
// rgb_in[ 14 ]
initial
begin
	rgb_in[14] = 1'b0;
end 
// rgb_in[ 13 ]
initial
begin
	rgb_in[13] = 1'b0;
end 
// rgb_in[ 12 ]
initial
begin
	rgb_in[12] = 1'b0;
end 
// rgb_in[ 11 ]
initial
begin
	rgb_in[11] = 1'b0;
end 
// rgb_in[ 10 ]
initial
begin
	rgb_in[10] = 1'b0;
end 
// rgb_in[ 9 ]
initial
begin
	rgb_in[9] = 1'b0;
end 
// rgb_in[ 8 ]
initial
begin
	rgb_in[8] = 1'b0;
end 
// rgb_in[ 7 ]
initial
begin
	rgb_in[7] = 1'b1;
	rgb_in[7] = #20000 1'b0;
	rgb_in[7] = #20000 1'b1;
	rgb_in[7] = #20000 1'b0;
	rgb_in[7] = #20000 1'b1;
	rgb_in[7] = #20000 1'b0;
	rgb_in[7] = #20000 1'b1;
	rgb_in[7] = #100000 1'b0;
	rgb_in[7] = #20000 1'b1;
	rgb_in[7] = #20000 1'b0;
	rgb_in[7] = #40000 1'b1;
	rgb_in[7] = #60000 1'b0;
	rgb_in[7] = #100000 1'b1;
	rgb_in[7] = #40000 1'b0;
	rgb_in[7] = #20000 1'b1;
	rgb_in[7] = #20000 1'b0;
	rgb_in[7] = #20000 1'b1;
	rgb_in[7] = #40000 1'b0;
	rgb_in[7] = #40000 1'b1;
	rgb_in[7] = #40000 1'b0;
	rgb_in[7] = #40000 1'b1;
	rgb_in[7] = #20000 1'b0;
	rgb_in[7] = #20000 1'b1;
	rgb_in[7] = #40000 1'b0;
	rgb_in[7] = #20000 1'b1;
	rgb_in[7] = #40000 1'b0;
	rgb_in[7] = #40000 1'b1;
	rgb_in[7] = #40000 1'b0;
	rgb_in[7] = #80000 1'b1;
	rgb_in[7] = #60000 1'b0;
	rgb_in[7] = #60000 1'b1;
	rgb_in[7] = #20000 1'b0;
	rgb_in[7] = #20000 1'b1;
	rgb_in[7] = #20000 1'b0;
	rgb_in[7] = #20000 1'b1;
	rgb_in[7] = #40000 1'b0;
	rgb_in[7] = #40000 1'b1;
	rgb_in[7] = #20000 1'b0;
	rgb_in[7] = #40000 1'b1;
	rgb_in[7] = #40000 1'b0;
	rgb_in[7] = #40000 1'b1;
	rgb_in[7] = #20000 1'b0;
	rgb_in[7] = #100000 1'b1;
	rgb_in[7] = #20000 1'b0;
	rgb_in[7] = #40000 1'b1;
	rgb_in[7] = #20000 1'b0;
	rgb_in[7] = #20000 1'b1;
	rgb_in[7] = #20000 1'b0;
	rgb_in[7] = #60000 1'b1;
	rgb_in[7] = #20000 1'b0;
	rgb_in[7] = #100000 1'b1;
	rgb_in[7] = #40000 1'b0;
	rgb_in[7] = #20000 1'b1;
	rgb_in[7] = #20000 1'b0;
end 
// rgb_in[ 6 ]
initial
begin
	rgb_in[6] = 1'b1;
	rgb_in[6] = #20000 1'b0;
	rgb_in[6] = #20000 1'b1;
	rgb_in[6] = #140000 1'b0;
	rgb_in[6] = #20000 1'b1;
	rgb_in[6] = #40000 1'b0;
	rgb_in[6] = #20000 1'b1;
	rgb_in[6] = #20000 1'b0;
	rgb_in[6] = #40000 1'b1;
	rgb_in[6] = #120000 1'b0;
	rgb_in[6] = #100000 1'b1;
	rgb_in[6] = #20000 1'b0;
	rgb_in[6] = #20000 1'b1;
	rgb_in[6] = #80000 1'b0;
	rgb_in[6] = #20000 1'b1;
	rgb_in[6] = #120000 1'b0;
	rgb_in[6] = #60000 1'b1;
	rgb_in[6] = #20000 1'b0;
	rgb_in[6] = #40000 1'b1;
	rgb_in[6] = #80000 1'b0;
	rgb_in[6] = #40000 1'b1;
	rgb_in[6] = #100000 1'b0;
	rgb_in[6] = #20000 1'b1;
	rgb_in[6] = #80000 1'b0;
	rgb_in[6] = #20000 1'b1;
	rgb_in[6] = #20000 1'b0;
	rgb_in[6] = #80000 1'b1;
	rgb_in[6] = #40000 1'b0;
	rgb_in[6] = #20000 1'b1;
	rgb_in[6] = #60000 1'b0;
	rgb_in[6] = #60000 1'b1;
	rgb_in[6] = #20000 1'b0;
	rgb_in[6] = #40000 1'b1;
	rgb_in[6] = #20000 1'b0;
	rgb_in[6] = #40000 1'b1;
	rgb_in[6] = #40000 1'b0;
	rgb_in[6] = #40000 1'b1;
	rgb_in[6] = #20000 1'b0;
	rgb_in[6] = #40000 1'b1;
	rgb_in[6] = #20000 1'b0;
	rgb_in[6] = #60000 1'b1;
	rgb_in[6] = #20000 1'b0;
	rgb_in[6] = #20000 1'b1;
end 
// rgb_in[ 5 ]
initial
begin
	rgb_in[5] = 1'b1;
	rgb_in[5] = #20000 1'b0;
	rgb_in[5] = #40000 1'b1;
	rgb_in[5] = #20000 1'b0;
	rgb_in[5] = #100000 1'b1;
	rgb_in[5] = #20000 1'b0;
	rgb_in[5] = #20000 1'b1;
	rgb_in[5] = #20000 1'b0;
	rgb_in[5] = #20000 1'b1;
	rgb_in[5] = #40000 1'b0;
	rgb_in[5] = #40000 1'b1;
	rgb_in[5] = #40000 1'b0;
	rgb_in[5] = #80000 1'b1;
	rgb_in[5] = #80000 1'b0;
	rgb_in[5] = #100000 1'b1;
	rgb_in[5] = #80000 1'b0;
	rgb_in[5] = #20000 1'b1;
	rgb_in[5] = #120000 1'b0;
	rgb_in[5] = #80000 1'b1;
	rgb_in[5] = #20000 1'b0;
	rgb_in[5] = #100000 1'b1;
	rgb_in[5] = #20000 1'b0;
	rgb_in[5] = #20000 1'b1;
	rgb_in[5] = #40000 1'b0;
	rgb_in[5] = #40000 1'b1;
	rgb_in[5] = #40000 1'b0;
	rgb_in[5] = #40000 1'b1;
	rgb_in[5] = #100000 1'b0;
	rgb_in[5] = #20000 1'b1;
	rgb_in[5] = #60000 1'b0;
	rgb_in[5] = #40000 1'b1;
	rgb_in[5] = #60000 1'b0;
	rgb_in[5] = #20000 1'b1;
	rgb_in[5] = #20000 1'b0;
	rgb_in[5] = #20000 1'b1;
	rgb_in[5] = #40000 1'b0;
	rgb_in[5] = #20000 1'b1;
	rgb_in[5] = #40000 1'b0;
	rgb_in[5] = #60000 1'b1;
	rgb_in[5] = #20000 1'b0;
	rgb_in[5] = #40000 1'b1;
	rgb_in[5] = #20000 1'b0;
	rgb_in[5] = #140000 1'b1;
end 
// rgb_in[ 4 ]
initial
begin
	rgb_in[4] = 1'b0;
	rgb_in[4] = #20000 1'b1;
	rgb_in[4] = #120000 1'b0;
	rgb_in[4] = #60000 1'b1;
	rgb_in[4] = #80000 1'b0;
	rgb_in[4] = #20000 1'b1;
	rgb_in[4] = #60000 1'b0;
	rgb_in[4] = #20000 1'b1;
	rgb_in[4] = #80000 1'b0;
	rgb_in[4] = #80000 1'b1;
	rgb_in[4] = #80000 1'b0;
	rgb_in[4] = #20000 1'b1;
	rgb_in[4] = #20000 1'b0;
	rgb_in[4] = #40000 1'b1;
	rgb_in[4] = #20000 1'b0;
	rgb_in[4] = #20000 1'b1;
	rgb_in[4] = #20000 1'b0;
	rgb_in[4] = #20000 1'b1;
	rgb_in[4] = #80000 1'b0;
	rgb_in[4] = #40000 1'b1;
	rgb_in[4] = #40000 1'b0;
	rgb_in[4] = #40000 1'b1;
	rgb_in[4] = #20000 1'b0;
	rgb_in[4] = #40000 1'b1;
	rgb_in[4] = #20000 1'b0;
	rgb_in[4] = #80000 1'b1;
	rgb_in[4] = #40000 1'b0;
	rgb_in[4] = #60000 1'b1;
	rgb_in[4] = #40000 1'b0;
	rgb_in[4] = #20000 1'b1;
	rgb_in[4] = #20000 1'b0;
	rgb_in[4] = #20000 1'b1;
	rgb_in[4] = #40000 1'b0;
	rgb_in[4] = #20000 1'b1;
	rgb_in[4] = #40000 1'b0;
	rgb_in[4] = #40000 1'b1;
	rgb_in[4] = #100000 1'b0;
	rgb_in[4] = #80000 1'b1;
	rgb_in[4] = #20000 1'b0;
	rgb_in[4] = #40000 1'b1;
	rgb_in[4] = #20000 1'b0;
	rgb_in[4] = #20000 1'b1;
	rgb_in[4] = #20000 1'b0;
	rgb_in[4] = #20000 1'b1;
	rgb_in[4] = #20000 1'b0;
	rgb_in[4] = #20000 1'b1;
	rgb_in[4] = #60000 1'b0;
	rgb_in[4] = #40000 1'b1;
end 
// rgb_in[ 3 ]
initial
begin
	rgb_in[3] = 1'b1;
	rgb_in[3] = #40000 1'b0;
	rgb_in[3] = #60000 1'b1;
	rgb_in[3] = #20000 1'b0;
	rgb_in[3] = #40000 1'b1;
	rgb_in[3] = #60000 1'b0;
	rgb_in[3] = #40000 1'b1;
	rgb_in[3] = #40000 1'b0;
	rgb_in[3] = #140000 1'b1;
	rgb_in[3] = #100000 1'b0;
	rgb_in[3] = #20000 1'b1;
	rgb_in[3] = #40000 1'b0;
	rgb_in[3] = #20000 1'b1;
	rgb_in[3] = #20000 1'b0;
	rgb_in[3] = #80000 1'b1;
	rgb_in[3] = #40000 1'b0;
	rgb_in[3] = #180000 1'b1;
	rgb_in[3] = #60000 1'b0;
	rgb_in[3] = #20000 1'b1;
	rgb_in[3] = #40000 1'b0;
	rgb_in[3] = #80000 1'b1;
	rgb_in[3] = #20000 1'b0;
	rgb_in[3] = #20000 1'b1;
	rgb_in[3] = #20000 1'b0;
	rgb_in[3] = #60000 1'b1;
	rgb_in[3] = #20000 1'b0;
	rgb_in[3] = #20000 1'b1;
	rgb_in[3] = #20000 1'b0;
	rgb_in[3] = #100000 1'b1;
	rgb_in[3] = #20000 1'b0;
	rgb_in[3] = #120000 1'b1;
	rgb_in[3] = #20000 1'b0;
	rgb_in[3] = #40000 1'b1;
	rgb_in[3] = #20000 1'b0;
	rgb_in[3] = #60000 1'b1;
	rgb_in[3] = #40000 1'b0;
	rgb_in[3] = #40000 1'b1;
	rgb_in[3] = #100000 1'b0;
	rgb_in[3] = #20000 1'b1;
	rgb_in[3] = #20000 1'b0;
	rgb_in[3] = #20000 1'b1;
	rgb_in[3] = #20000 1'b0;
	rgb_in[3] = #20000 1'b1;
end 
// rgb_in[ 2 ]
initial
begin
	rgb_in[2] = 1'b1;
	rgb_in[2] = #80000 1'b0;
	rgb_in[2] = #80000 1'b1;
	rgb_in[2] = #20000 1'b0;
	rgb_in[2] = #40000 1'b1;
	rgb_in[2] = #60000 1'b0;
	rgb_in[2] = #20000 1'b1;
	rgb_in[2] = #40000 1'b0;
	rgb_in[2] = #40000 1'b1;
	rgb_in[2] = #20000 1'b0;
	rgb_in[2] = #20000 1'b1;
	rgb_in[2] = #20000 1'b0;
	rgb_in[2] = #120000 1'b1;
	rgb_in[2] = #40000 1'b0;
	rgb_in[2] = #80000 1'b1;
	rgb_in[2] = #20000 1'b0;
	rgb_in[2] = #40000 1'b1;
	rgb_in[2] = #20000 1'b0;
	rgb_in[2] = #60000 1'b1;
	rgb_in[2] = #80000 1'b0;
	rgb_in[2] = #20000 1'b1;
	rgb_in[2] = #20000 1'b0;
	rgb_in[2] = #40000 1'b1;
	rgb_in[2] = #60000 1'b0;
	rgb_in[2] = #40000 1'b1;
	rgb_in[2] = #20000 1'b0;
	rgb_in[2] = #60000 1'b1;
	rgb_in[2] = #20000 1'b0;
	rgb_in[2] = #20000 1'b1;
	rgb_in[2] = #60000 1'b0;
	rgb_in[2] = #60000 1'b1;
	rgb_in[2] = #20000 1'b0;
	rgb_in[2] = #100000 1'b1;
	rgb_in[2] = #20000 1'b0;
	rgb_in[2] = #20000 1'b1;
	rgb_in[2] = #20000 1'b0;
	rgb_in[2] = #40000 1'b1;
	rgb_in[2] = #20000 1'b0;
	rgb_in[2] = #60000 1'b1;
	rgb_in[2] = #20000 1'b0;
	rgb_in[2] = #40000 1'b1;
	rgb_in[2] = #20000 1'b0;
	rgb_in[2] = #20000 1'b1;
	rgb_in[2] = #60000 1'b0;
	rgb_in[2] = #80000 1'b1;
	rgb_in[2] = #20000 1'b0;
	rgb_in[2] = #20000 1'b1;
	rgb_in[2] = #40000 1'b0;
	rgb_in[2] = #40000 1'b1;
end 
// rgb_in[ 1 ]
initial
begin
	rgb_in[1] = 1'b1;
	rgb_in[1] = #20000 1'b0;
	rgb_in[1] = #20000 1'b1;
	rgb_in[1] = #20000 1'b0;
	rgb_in[1] = #40000 1'b1;
	rgb_in[1] = #20000 1'b0;
	rgb_in[1] = #20000 1'b1;
	rgb_in[1] = #20000 1'b0;
	rgb_in[1] = #20000 1'b1;
	rgb_in[1] = #40000 1'b0;
	rgb_in[1] = #60000 1'b1;
	rgb_in[1] = #20000 1'b0;
	rgb_in[1] = #20000 1'b1;
	rgb_in[1] = #20000 1'b0;
	rgb_in[1] = #20000 1'b1;
	rgb_in[1] = #20000 1'b0;
	rgb_in[1] = #20000 1'b1;
	rgb_in[1] = #100000 1'b0;
	rgb_in[1] = #20000 1'b1;
	rgb_in[1] = #60000 1'b0;
	rgb_in[1] = #40000 1'b1;
	rgb_in[1] = #40000 1'b0;
	rgb_in[1] = #20000 1'b1;
	rgb_in[1] = #40000 1'b0;
	rgb_in[1] = #20000 1'b1;
	rgb_in[1] = #20000 1'b0;
	rgb_in[1] = #20000 1'b1;
	rgb_in[1] = #20000 1'b0;
	rgb_in[1] = #20000 1'b1;
	rgb_in[1] = #40000 1'b0;
	rgb_in[1] = #20000 1'b1;
	rgb_in[1] = #40000 1'b0;
	rgb_in[1] = #80000 1'b1;
	rgb_in[1] = #40000 1'b0;
	rgb_in[1] = #40000 1'b1;
	rgb_in[1] = #40000 1'b0;
	rgb_in[1] = #40000 1'b1;
	rgb_in[1] = #80000 1'b0;
	rgb_in[1] = #20000 1'b1;
	rgb_in[1] = #20000 1'b0;
	rgb_in[1] = #20000 1'b1;
	rgb_in[1] = #20000 1'b0;
	rgb_in[1] = #20000 1'b1;
	rgb_in[1] = #60000 1'b0;
	rgb_in[1] = #20000 1'b1;
	rgb_in[1] = #20000 1'b0;
	rgb_in[1] = #60000 1'b1;
	rgb_in[1] = #40000 1'b0;
	rgb_in[1] = #60000 1'b1;
	rgb_in[1] = #20000 1'b0;
	rgb_in[1] = #40000 1'b1;
	rgb_in[1] = #40000 1'b0;
	rgb_in[1] = #60000 1'b1;
	rgb_in[1] = #20000 1'b0;
	rgb_in[1] = #20000 1'b1;
	rgb_in[1] = #160000 1'b0;
end 
// rgb_in[ 0 ]
initial
begin
	rgb_in[0] = 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #20000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #40000 1'b1;
	rgb_in[0] = #60000 1'b0;
	rgb_in[0] = #20000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #20000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #40000 1'b1;
	rgb_in[0] = #60000 1'b0;
	rgb_in[0] = #20000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #40000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #40000 1'b1;
	rgb_in[0] = #80000 1'b0;
	rgb_in[0] = #20000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #80000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #20000 1'b1;
	rgb_in[0] = #60000 1'b0;
	rgb_in[0] = #20000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #20000 1'b1;
	rgb_in[0] = #60000 1'b0;
	rgb_in[0] = #40000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #60000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #60000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #20000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #20000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #40000 1'b1;
	rgb_in[0] = #80000 1'b0;
	rgb_in[0] = #120000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #20000 1'b1;
	rgb_in[0] = #80000 1'b0;
	rgb_in[0] = #20000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #20000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #80000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #20000 1'b1;
	rgb_in[0] = #20000 1'b0;
	rgb_in[0] = #20000 1'b1;
	rgb_in[0] = #80000 1'b0;
	rgb_in[0] = #20000 1'b1;
end 

// data_valid
initial
begin
	data_valid = 1'b1;
	data_valid = #590000 1'b0;
	data_valid = #20000 1'b1;
end 
endmodule

