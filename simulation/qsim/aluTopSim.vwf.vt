// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/12/2020 17:11:37"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          aluSim
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module aluSim_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [4:0] height;
reg isPopulated;
reg isSprite;
reg [3:0] numberOfCharacters;
reg pipeline_clk;
reg [4:0] width;
reg [4:0] xPixel;
reg [4:0] xPosition;
reg [4:0] yPixel;
reg [4:0] yPosition;
// wires                                               
wire [29:0] flashAddressOffsetBits;
wire [15:0] layerX;
wire [15:0] layerY;
wire [26:0] ramAddressOffsetBytes;
wire rdy;

// assign statements (if any)                          
aluSim i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.flashAddressOffsetBits(flashAddressOffsetBits),
	.height(height),
	.isPopulated(isPopulated),
	.isSprite(isSprite),
	.layerX(layerX),
	.layerY(layerY),
	.numberOfCharacters(numberOfCharacters),
	.pipeline_clk(pipeline_clk),
	.ramAddressOffsetBytes(ramAddressOffsetBytes),
	.rdy(rdy),
	.width(width),
	.xPixel(xPixel),
	.xPosition(xPosition),
	.yPixel(yPixel),
	.yPosition(yPosition)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	clk = 1'b1;
	# 10000;
	repeat(49)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
end 

// pipeline_clk
initial
begin
	pipeline_clk = 1'b0;
	pipeline_clk = #120000 1'b1;
	pipeline_clk = #10000 1'b0;
	pipeline_clk = #110000 1'b1;
	pipeline_clk = #10000 1'b0;
	pipeline_clk = #110000 1'b1;
	pipeline_clk = #10000 1'b0;
	pipeline_clk = #110000 1'b1;
	pipeline_clk = #10000 1'b0;
	pipeline_clk = #110000 1'b1;
	pipeline_clk = #10000 1'b0;
	pipeline_clk = #110000 1'b1;
	pipeline_clk = #10000 1'b0;
	pipeline_clk = #110000 1'b1;
	pipeline_clk = #10000 1'b0;
	pipeline_clk = #110000 1'b1;
	pipeline_clk = #10000 1'b0;
end 
// xPixel[ 4 ]
initial
begin
	xPixel[4] = 1'b0;
	xPixel[4] = #120000 1'b1;
	xPixel[4] = #120000 1'b0;
	xPixel[4] = #120000 1'b1;
	xPixel[4] = #240000 1'b0;
	xPixel[4] = #360000 1'b1;
end 
// xPixel[ 3 ]
initial
begin
	xPixel[3] = 1'b1;
	xPixel[3] = #240000 1'b0;
	xPixel[3] = #120000 1'b1;
	xPixel[3] = #240000 1'b0;
	xPixel[3] = #360000 1'b1;
end 
// xPixel[ 2 ]
initial
begin
	xPixel[2] = 1'b0;
	xPixel[2] = #120000 1'b1;
	xPixel[2] = #120000 1'b0;
	xPixel[2] = #240000 1'b1;
	xPixel[2] = #120000 1'b0;
	xPixel[2] = #120000 1'b1;
	xPixel[2] = #120000 1'b0;
	xPixel[2] = #120000 1'b1;
end 
// xPixel[ 1 ]
initial
begin
	xPixel[1] = 1'b0;
	xPixel[1] = #360000 1'b1;
	xPixel[1] = #360000 1'b0;
	xPixel[1] = #120000 1'b1;
end 
// xPixel[ 0 ]
initial
begin
	xPixel[0] = 1'b0;
	xPixel[0] = #240000 1'b1;
end 
// yPixel[ 4 ]
initial
begin
	yPixel[4] = 1'b1;
	yPixel[4] = #480000 1'b0;
	yPixel[4] = #240000 1'b1;
	yPixel[4] = #240000 1'b0;
end 
// yPixel[ 3 ]
initial
begin
	yPixel[3] = 1'b1;
	yPixel[3] = #360000 1'b0;
	yPixel[3] = #120000 1'b1;
	yPixel[3] = #240000 1'b0;
	yPixel[3] = #120000 1'b1;
	yPixel[3] = #120000 1'b0;
end 
// yPixel[ 2 ]
initial
begin
	yPixel[2] = 1'b0;
	yPixel[2] = #120000 1'b1;
	yPixel[2] = #120000 1'b0;
	yPixel[2] = #240000 1'b1;
	yPixel[2] = #120000 1'b0;
	yPixel[2] = #120000 1'b1;
	yPixel[2] = #120000 1'b0;
end 
// yPixel[ 1 ]
initial
begin
	yPixel[1] = 1'b0;
	yPixel[1] = #240000 1'b1;
	yPixel[1] = #240000 1'b0;
	yPixel[1] = #120000 1'b1;
	yPixel[1] = #120000 1'b0;
	yPixel[1] = #120000 1'b1;
	yPixel[1] = #120000 1'b0;
end 
// yPixel[ 0 ]
initial
begin
	yPixel[0] = 1'b1;
	yPixel[0] = #240000 1'b0;
	yPixel[0] = #120000 1'b1;
	yPixel[0] = #240000 1'b0;
	yPixel[0] = #120000 1'b1;
	yPixel[0] = #120000 1'b0;
	yPixel[0] = #120000 1'b1;
end 

// isPopulated
initial
begin
	isPopulated = 1'b1;
end 

// isSprite
initial
begin
	isSprite = 1'b1;
	isSprite = #240000 1'b0;
	isSprite = #120000 1'b1;
	isSprite = #240000 1'b0;
	isSprite = #240000 1'b1;
end 
// height[ 4 ]
initial
begin
	height[4] = 1'b1;
	height[4] = #120000 1'b0;
	height[4] = #240000 1'b1;
end 
// height[ 3 ]
initial
begin
	height[3] = 1'b1;
	height[3] = #120000 1'b0;
	height[3] = #120000 1'b1;
	height[3] = #360000 1'b0;
	height[3] = #120000 1'b1;
end 
// height[ 2 ]
initial
begin
	height[2] = 1'b0;
	height[2] = #240000 1'b1;
	height[2] = #240000 1'b0;
	height[2] = #120000 1'b1;
	height[2] = #120000 1'b0;
	height[2] = #120000 1'b1;
	height[2] = #120000 1'b0;
end 
// height[ 1 ]
initial
begin
	height[1] = 1'b0;
	height[1] = #840000 1'b1;
	height[1] = #120000 1'b0;
end 
// height[ 0 ]
initial
begin
	height[0] = 1'b0;
	height[0] = #240000 1'b1;
	height[0] = #240000 1'b0;
	height[0] = #120000 1'b1;
end 
// width[ 4 ]
initial
begin
	width[4] = 1'b0;
	width[4] = #120000 1'b1;
	width[4] = #600000 1'b0;
	width[4] = #240000 1'b1;
end 
// width[ 3 ]
initial
begin
	width[3] = 1'b1;
	width[3] = #120000 1'b0;
	width[3] = #600000 1'b1;
	width[3] = #120000 1'b0;
end 
// width[ 2 ]
initial
begin
	width[2] = 1'b1;
	width[2] = #120000 1'b0;
	width[2] = #240000 1'b1;
	width[2] = #360000 1'b0;
	width[2] = #120000 1'b1;
	width[2] = #120000 1'b0;
end 
// width[ 1 ]
initial
begin
	width[1] = 1'b0;
	width[1] = #600000 1'b1;
	width[1] = #120000 1'b0;
end 
// width[ 0 ]
initial
begin
	width[0] = 1'b0;
	width[0] = #240000 1'b1;
	width[0] = #120000 1'b0;
	width[0] = #120000 1'b1;
	width[0] = #240000 1'b0;
	width[0] = #240000 1'b1;
end 
// xPosition[ 4 ]
initial
begin
	xPosition[4] = 1'b1;
	xPosition[4] = #120000 1'b0;
	xPosition[4] = #360000 1'b1;
	xPosition[4] = #240000 1'b0;
	xPosition[4] = #120000 1'b1;
end 
// xPosition[ 3 ]
initial
begin
	xPosition[3] = 1'b0;
	xPosition[3] = #120000 1'b1;
	xPosition[3] = #120000 1'b0;
	xPosition[3] = #120000 1'b1;
	xPosition[3] = #600000 1'b0;
end 
// xPosition[ 2 ]
initial
begin
	xPosition[2] = 1'b0;
	xPosition[2] = #120000 1'b1;
	xPosition[2] = #720000 1'b0;
end 
// xPosition[ 1 ]
initial
begin
	xPosition[1] = 1'b1;
	xPosition[1] = #360000 1'b0;
	xPosition[1] = #240000 1'b1;
	xPosition[1] = #120000 1'b0;
	xPosition[1] = #120000 1'b1;
	xPosition[1] = #120000 1'b0;
end 
// xPosition[ 0 ]
initial
begin
	xPosition[0] = 1'b1;
	xPosition[0] = #240000 1'b0;
	xPosition[0] = #240000 1'b1;
	xPosition[0] = #120000 1'b0;
end 
// yPosition[ 4 ]
initial
begin
	yPosition[4] = 1'b1;
	yPosition[4] = #360000 1'b0;
	yPosition[4] = #360000 1'b1;
	yPosition[4] = #240000 1'b0;
end 
// yPosition[ 3 ]
initial
begin
	yPosition[3] = 1'b1;
	yPosition[3] = #360000 1'b0;
	yPosition[3] = #120000 1'b1;
end 
// yPosition[ 2 ]
initial
begin
	yPosition[2] = 1'b1;
	yPosition[2] = #240000 1'b0;
	yPosition[2] = #480000 1'b1;
	yPosition[2] = #120000 1'b0;
	yPosition[2] = #120000 1'b1;
end 
// yPosition[ 1 ]
initial
begin
	yPosition[1] = 1'b0;
	yPosition[1] = #120000 1'b1;
	yPosition[1] = #120000 1'b0;
end 
// yPosition[ 0 ]
initial
begin
	yPosition[0] = 1'b0;
	yPosition[0] = #240000 1'b1;
	yPosition[0] = #240000 1'b0;
	yPosition[0] = #120000 1'b1;
end 
// numberOfCharacters[ 3 ]
initial
begin
	numberOfCharacters[3] = 1'b1;
	numberOfCharacters[3] = #240000 1'b0;
	numberOfCharacters[3] = #120000 1'b1;
	numberOfCharacters[3] = #120000 1'b0;
	numberOfCharacters[3] = #120000 1'b1;
	numberOfCharacters[3] = #120000 1'b0;
	numberOfCharacters[3] = #120000 1'b1;
end 
// numberOfCharacters[ 2 ]
initial
begin
	numberOfCharacters[2] = 1'b0;
	numberOfCharacters[2] = #120000 1'b1;
	numberOfCharacters[2] = #360000 1'b0;
	numberOfCharacters[2] = #120000 1'b1;
	numberOfCharacters[2] = #120000 1'b0;
	numberOfCharacters[2] = #240000 1'b1;
end 
// numberOfCharacters[ 1 ]
initial
begin
	numberOfCharacters[1] = 1'b0;
	numberOfCharacters[1] = #120000 1'b1;
	numberOfCharacters[1] = #120000 1'b0;
	numberOfCharacters[1] = #480000 1'b1;
	numberOfCharacters[1] = #240000 1'b0;
end 
// numberOfCharacters[ 0 ]
initial
begin
	numberOfCharacters[0] = 1'b1;
	numberOfCharacters[0] = #120000 1'b0;
	numberOfCharacters[0] = #360000 1'b1;
	numberOfCharacters[0] = #240000 1'b0;
	numberOfCharacters[0] = #120000 1'b1;
end 
endmodule

