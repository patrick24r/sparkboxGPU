// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/26/2020 18:59:17"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          layerRamCache
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module layerRamCache_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [23:0] addr_words;
reg clk;
reg [15:0] data_i;
reg [4:0] layer;
reg rst;
reg write_en;
// wires                                               
wire [23:0] cacheAddressOffset;
wire [15:0] data_o;
wire data_o_valid;
wire testOut;

// assign statements (if any)                          
layerRamCache i1 (
// port map - connection between master ports and signals/registers   
	.addr_words(addr_words),
	.cacheAddressOffset(cacheAddressOffset),
	.clk(clk),
	.data_i(data_i),
	.data_o(data_o),
	.data_o_valid(data_o_valid),
	.layer(layer),
	.rst(rst),
	.testOut(testOut),
	.write_en(write_en)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b1;
end 

// write_en
initial
begin
	write_en = 1'b1;
	# 20000;
	repeat(23)
	begin
		write_en = 1'b0;
		write_en = #20000 1'b1;
		# 20000;
	end
	write_en = 1'b0;
end 
// layer[ 4 ]
initial
begin
	layer[4] = 1'b0;
	layer[4] = #240000 1'b1;
	layer[4] = #80000 1'b0;
	layer[4] = #40000 1'b1;
	layer[4] = #240000 1'b0;
	layer[4] = #120000 1'b1;
	layer[4] = #80000 1'b0;
	layer[4] = #80000 1'b1;
	layer[4] = #40000 1'b0;
end 
// layer[ 3 ]
initial
begin
	layer[3] = 1'b1;
	layer[3] = #40000 1'b0;
	layer[3] = #80000 1'b1;
	layer[3] = #200000 1'b0;
	layer[3] = #40000 1'b1;
	layer[3] = #40000 1'b0;
	layer[3] = #40000 1'b1;
	layer[3] = #40000 1'b0;
	layer[3] = #80000 1'b1;
	layer[3] = #40000 1'b0;
	layer[3] = #80000 1'b1;
	layer[3] = #40000 1'b0;
	layer[3] = #40000 1'b1;
	layer[3] = #40000 1'b0;
	layer[3] = #40000 1'b1;
	layer[3] = #80000 1'b0;
end 
// layer[ 2 ]
initial
begin
	layer[2] = 1'b0;
	layer[2] = #40000 1'b1;
	layer[2] = #200000 1'b0;
	layer[2] = #40000 1'b1;
	layer[2] = #80000 1'b0;
	layer[2] = #120000 1'b1;
	layer[2] = #40000 1'b0;
	layer[2] = #40000 1'b1;
	layer[2] = #40000 1'b0;
	layer[2] = #40000 1'b1;
	layer[2] = #120000 1'b0;
	layer[2] = #80000 1'b1;
	layer[2] = #40000 1'b0;
	layer[2] = #40000 1'b1;
end 
// layer[ 1 ]
initial
begin
	layer[1] = 1'b1;
	layer[1] = #120000 1'b0;
	layer[1] = #80000 1'b1;
	layer[1] = #40000 1'b0;
	layer[1] = #40000 1'b1;
	layer[1] = #120000 1'b0;
	layer[1] = #40000 1'b1;
	layer[1] = #40000 1'b0;
	layer[1] = #80000 1'b1;
	layer[1] = #80000 1'b0;
	layer[1] = #40000 1'b1;
	layer[1] = #40000 1'b0;
	layer[1] = #120000 1'b1;
	layer[1] = #80000 1'b0;
end 
// layer[ 0 ]
initial
begin
	layer[0] = 1'b1;
	layer[0] = #40000 1'b0;
	layer[0] = #200000 1'b1;
	layer[0] = #40000 1'b0;
	layer[0] = #40000 1'b1;
	layer[0] = #120000 1'b0;
	layer[0] = #80000 1'b1;
	layer[0] = #40000 1'b0;
	layer[0] = #80000 1'b1;
	layer[0] = #200000 1'b0;
end 
// addr_words[ 23 ]
initial
begin
	addr_words[23] = 1'b0;
end 
// addr_words[ 22 ]
initial
begin
	addr_words[22] = 1'b0;
end 
// addr_words[ 21 ]
initial
begin
	addr_words[21] = 1'b0;
end 
// addr_words[ 20 ]
initial
begin
	addr_words[20] = 1'b0;
end 
// addr_words[ 19 ]
initial
begin
	addr_words[19] = 1'b0;
end 
// addr_words[ 18 ]
initial
begin
	addr_words[18] = 1'b0;
end 
// addr_words[ 17 ]
initial
begin
	addr_words[17] = 1'b0;
end 
// addr_words[ 16 ]
initial
begin
	addr_words[16] = 1'b0;
end 
// addr_words[ 15 ]
initial
begin
	addr_words[15] = 1'b0;
end 
// addr_words[ 14 ]
initial
begin
	addr_words[14] = 1'b0;
end 
// addr_words[ 13 ]
initial
begin
	addr_words[13] = 1'b0;
end 
// addr_words[ 12 ]
initial
begin
	addr_words[12] = 1'b0;
end 
// addr_words[ 11 ]
initial
begin
	addr_words[11] = 1'b0;
end 
// addr_words[ 10 ]
initial
begin
	addr_words[10] = 1'b0;
end 
// addr_words[ 9 ]
initial
begin
	addr_words[9] = 1'b0;
end 
// addr_words[ 8 ]
initial
begin
	addr_words[8] = 1'b0;
end 
// addr_words[ 7 ]
initial
begin
	addr_words[7] = 1'b0;
end 
// addr_words[ 6 ]
initial
begin
	addr_words[6] = 1'b1;
	addr_words[6] = #80000 1'b0;
	addr_words[6] = #40000 1'b1;
	addr_words[6] = #40000 1'b0;
	addr_words[6] = #80000 1'b1;
	addr_words[6] = #120000 1'b0;
	addr_words[6] = #40000 1'b1;
	addr_words[6] = #80000 1'b0;
	addr_words[6] = #40000 1'b1;
	addr_words[6] = #120000 1'b0;
	addr_words[6] = #160000 1'b1;
	addr_words[6] = #80000 1'b0;
	addr_words[6] = #40000 1'b1;
end 
// addr_words[ 5 ]
initial
begin
	addr_words[5] = 1'b1;
	addr_words[5] = #40000 1'b0;
	addr_words[5] = #40000 1'b1;
	addr_words[5] = #120000 1'b0;
	addr_words[5] = #160000 1'b1;
	addr_words[5] = #40000 1'b0;
	addr_words[5] = #40000 1'b1;
	addr_words[5] = #80000 1'b0;
	addr_words[5] = #40000 1'b1;
	addr_words[5] = #40000 1'b0;
	addr_words[5] = #40000 1'b1;
	addr_words[5] = #40000 1'b0;
	addr_words[5] = #40000 1'b1;
	addr_words[5] = #40000 1'b0;
	addr_words[5] = #120000 1'b1;
end 
// addr_words[ 4 ]
initial
begin
	addr_words[4] = 1'b1;
	addr_words[4] = #40000 1'b0;
	addr_words[4] = #80000 1'b1;
	addr_words[4] = #40000 1'b0;
	addr_words[4] = #240000 1'b1;
	addr_words[4] = #40000 1'b0;
	addr_words[4] = #160000 1'b1;
	addr_words[4] = #120000 1'b0;
	addr_words[4] = #80000 1'b1;
	addr_words[4] = #120000 1'b0;
end 
// addr_words[ 3 ]
initial
begin
	addr_words[3] = 1'b0;
	addr_words[3] = #40000 1'b1;
	addr_words[3] = #40000 1'b0;
	addr_words[3] = #80000 1'b1;
	addr_words[3] = #40000 1'b0;
	addr_words[3] = #40000 1'b1;
	addr_words[3] = #80000 1'b0;
	addr_words[3] = #80000 1'b1;
	addr_words[3] = #120000 1'b0;
	addr_words[3] = #40000 1'b1;
	addr_words[3] = #160000 1'b0;
end 
// addr_words[ 2 ]
initial
begin
	addr_words[2] = 1'b1;
	addr_words[2] = #80000 1'b0;
	addr_words[2] = #40000 1'b1;
	addr_words[2] = #80000 1'b0;
	addr_words[2] = #240000 1'b1;
	addr_words[2] = #40000 1'b0;
	addr_words[2] = #160000 1'b1;
	addr_words[2] = #40000 1'b0;
	addr_words[2] = #120000 1'b1;
	addr_words[2] = #40000 1'b0;
	addr_words[2] = #80000 1'b1;
end 
// addr_words[ 1 ]
initial
begin
	addr_words[1] = 1'b1;
	addr_words[1] = #80000 1'b0;
	addr_words[1] = #40000 1'b1;
	addr_words[1] = #80000 1'b0;
	addr_words[1] = #80000 1'b1;
	addr_words[1] = #80000 1'b0;
	addr_words[1] = #40000 1'b1;
	addr_words[1] = #40000 1'b0;
	addr_words[1] = #160000 1'b1;
	addr_words[1] = #80000 1'b0;
	addr_words[1] = #40000 1'b1;
	addr_words[1] = #40000 1'b0;
	addr_words[1] = #80000 1'b1;
end 
// addr_words[ 0 ]
initial
begin
	addr_words[0] = 1'b0;
	addr_words[0] = #40000 1'b1;
	addr_words[0] = #40000 1'b0;
	addr_words[0] = #280000 1'b1;
	addr_words[0] = #160000 1'b0;
	addr_words[0] = #40000 1'b1;
	addr_words[0] = #80000 1'b0;
	addr_words[0] = #40000 1'b1;
	addr_words[0] = #40000 1'b0;
	addr_words[0] = #80000 1'b1;
	addr_words[0] = #40000 1'b0;
end 
// data_i[ 15 ]
initial
begin
	data_i[15] = 1'b0;
end 
// data_i[ 14 ]
initial
begin
	data_i[14] = 1'b0;
end 
// data_i[ 13 ]
initial
begin
	data_i[13] = 1'b0;
end 
// data_i[ 12 ]
initial
begin
	data_i[12] = 1'b0;
end 
// data_i[ 11 ]
initial
begin
	data_i[11] = 1'b0;
end 
// data_i[ 10 ]
initial
begin
	data_i[10] = 1'b0;
end 
// data_i[ 9 ]
initial
begin
	data_i[9] = 1'b0;
end 
// data_i[ 8 ]
initial
begin
	data_i[8] = 1'b0;
end 
// data_i[ 7 ]
initial
begin
	data_i[7] = 1'b0;
end 
// data_i[ 6 ]
initial
begin
	data_i[6] = 1'b0;
end 
// data_i[ 5 ]
initial
begin
	data_i[5] = 1'b0;
end 
// data_i[ 4 ]
initial
begin
	data_i[4] = 1'b0;
	data_i[4] = #60000 1'b1;
	data_i[4] = #20000 1'b0;
	data_i[4] = #40000 1'b1;
	data_i[4] = #60000 1'b0;
	data_i[4] = #60000 1'b1;
	data_i[4] = #20000 1'b0;
	data_i[4] = #40000 1'b1;
	data_i[4] = #40000 1'b0;
	data_i[4] = #20000 1'b1;
	data_i[4] = #80000 1'b0;
	data_i[4] = #60000 1'b1;
	data_i[4] = #40000 1'b0;
	data_i[4] = #20000 1'b1;
	data_i[4] = #20000 1'b0;
	data_i[4] = #80000 1'b1;
	data_i[4] = #20000 1'b0;
	data_i[4] = #40000 1'b1;
	data_i[4] = #20000 1'b0;
	data_i[4] = #80000 1'b1;
	data_i[4] = #20000 1'b0;
	data_i[4] = #20000 1'b1;
	data_i[4] = #20000 1'b0;
	data_i[4] = #60000 1'b1;
	data_i[4] = #20000 1'b0;
end 
// data_i[ 3 ]
initial
begin
	data_i[3] = 1'b0;
	data_i[3] = #40000 1'b1;
	data_i[3] = #100000 1'b0;
	data_i[3] = #20000 1'b1;
	data_i[3] = #20000 1'b0;
	data_i[3] = #40000 1'b1;
	data_i[3] = #40000 1'b0;
	data_i[3] = #40000 1'b1;
	data_i[3] = #20000 1'b0;
	data_i[3] = #80000 1'b1;
	data_i[3] = #20000 1'b0;
	data_i[3] = #20000 1'b1;
	data_i[3] = #20000 1'b0;
	data_i[3] = #40000 1'b1;
	data_i[3] = #20000 1'b0;
	data_i[3] = #60000 1'b1;
	data_i[3] = #40000 1'b0;
	data_i[3] = #40000 1'b1;
	data_i[3] = #20000 1'b0;
	data_i[3] = #60000 1'b1;
	data_i[3] = #20000 1'b0;
	data_i[3] = #20000 1'b1;
	data_i[3] = #40000 1'b0;
	data_i[3] = #20000 1'b1;
	data_i[3] = #60000 1'b0;
end 
// data_i[ 2 ]
initial
begin
	data_i[2] = 1'b1;
	data_i[2] = #20000 1'b0;
	data_i[2] = #40000 1'b1;
	data_i[2] = #20000 1'b0;
	data_i[2] = #60000 1'b1;
	data_i[2] = #20000 1'b0;
	data_i[2] = #20000 1'b1;
	data_i[2] = #40000 1'b0;
	data_i[2] = #40000 1'b1;
	data_i[2] = #20000 1'b0;
	data_i[2] = #20000 1'b1;
	data_i[2] = #20000 1'b0;
	data_i[2] = #20000 1'b1;
	data_i[2] = #20000 1'b0;
	data_i[2] = #20000 1'b1;
	data_i[2] = #20000 1'b0;
	data_i[2] = #20000 1'b1;
	data_i[2] = #20000 1'b0;
	data_i[2] = #40000 1'b1;
	data_i[2] = #20000 1'b0;
	data_i[2] = #20000 1'b1;
	data_i[2] = #20000 1'b0;
	data_i[2] = #60000 1'b1;
	data_i[2] = #60000 1'b0;
	data_i[2] = #40000 1'b1;
	data_i[2] = #20000 1'b0;
	data_i[2] = #20000 1'b1;
	data_i[2] = #20000 1'b0;
	data_i[2] = #100000 1'b1;
	data_i[2] = #40000 1'b0;
	data_i[2] = #20000 1'b1;
	data_i[2] = #20000 1'b0;
	data_i[2] = #40000 1'b1;
end 
// data_i[ 1 ]
initial
begin
	data_i[1] = 1'b0;
	data_i[1] = #40000 1'b1;
	data_i[1] = #20000 1'b0;
	data_i[1] = #20000 1'b1;
	data_i[1] = #40000 1'b0;
	data_i[1] = #40000 1'b1;
	data_i[1] = #40000 1'b0;
	data_i[1] = #40000 1'b1;
	data_i[1] = #40000 1'b0;
	data_i[1] = #40000 1'b1;
	data_i[1] = #100000 1'b0;
	data_i[1] = #80000 1'b1;
	data_i[1] = #20000 1'b0;
	data_i[1] = #20000 1'b1;
	data_i[1] = #40000 1'b0;
	data_i[1] = #60000 1'b1;
	data_i[1] = #20000 1'b0;
	data_i[1] = #60000 1'b1;
	data_i[1] = #20000 1'b0;
	data_i[1] = #100000 1'b1;
	data_i[1] = #20000 1'b0;
	data_i[1] = #40000 1'b1;
	data_i[1] = #20000 1'b0;
	data_i[1] = #20000 1'b1;
	data_i[1] = #20000 1'b0;
end 
// data_i[ 0 ]
initial
begin
	data_i[0] = 1'b0;
	data_i[0] = #20000 1'b1;
	data_i[0] = #40000 1'b0;
	data_i[0] = #40000 1'b1;
	data_i[0] = #20000 1'b0;
	data_i[0] = #100000 1'b1;
	data_i[0] = #20000 1'b0;
	data_i[0] = #120000 1'b1;
	data_i[0] = #80000 1'b0;
	data_i[0] = #20000 1'b1;
	data_i[0] = #40000 1'b0;
	data_i[0] = #60000 1'b1;
	data_i[0] = #20000 1'b0;
	data_i[0] = #20000 1'b1;
	data_i[0] = #20000 1'b0;
	data_i[0] = #40000 1'b1;
	data_i[0] = #20000 1'b0;
	data_i[0] = #60000 1'b1;
	data_i[0] = #40000 1'b0;
	data_i[0] = #20000 1'b1;
	data_i[0] = #80000 1'b0;
	data_i[0] = #20000 1'b1;
	data_i[0] = #80000 1'b0;
end 
endmodule

